    1: Like Smalltalk, Python supports class methods, which differ from static 
    2: methods in that the exact dynamic type of the object being operated on is 
    3: an implicit parameter to the method (as a type object).  The following 
    4: example keeps a separate per-class object counter for every class in a 
    5:     _count = 0	# A shared value for Shape classes with no current objects
    6:         cls._count += 1         # Create/update class attribute
    7:         print 'Class %s has count = %s' % (cls.__name__, cls._count)
    8: class Point(Shape): pass	# An empty subclass of Shape
    9: This requires some perusing if you're new to Python.  Python requires 
   10: indentation to show logical subordination (whereas good programmers of 
   11: other languages indent by convention), so you can readily see that the 
   12: class Shape has three methods, _incr, showCount, and __init__.  The latter 
   13: is the special name used for constructors.  The other two methods are 
   14: class methods (indicated by the @classmethod prefix), so their parameter 
   15: is the unique class object for the instance on which they are invoked.  
   16: (The term "class object" here refers to a unique, bona fide object that 
   17: describes a class type, similar to, but more robust than, std::type_info 
   18: objects in C++.) The method named _incr is only called by the constructor.  
